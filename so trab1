
#include <stdio.h>
#include <stdlib.h>
#include <readline/readline.h>
#include <readline/history.h>
#include <string.h>
#include <unistd.h>
#include <ctype.h>
#include <fcntl.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <assert.h>
 
#define MAXARGS 100
#define PIPE_READ 0
#define PIPE_WRITE 1
 
typedef struct command {
    char *cmd;              // string apenas com o comando
    int argc;               // número de argumentos
    char *argv[MAXARGS+1];  // vector de argumentos do comando
    struct command *next;   // apontador para o próximo comando
} COMMAND;
 
// variáveis globais
char* inputfile = NULL;     // nome de ficheiro (em caso de redireccionamento da entrada padrão)
char* outputfile = NULL;    // nome de ficheiro (em caso de redireccionamento da saída padrão)
int background_exec = 0;    // indicação de execução concorrente com a mini-shell (0/1)
 
// declaração de funções
COMMAND* parse(char* linha);
void print_parse(COMMAND* commlist);
void execute_commands(COMMAND* commlist);
void free_commlist(COMMAND* commlist);
 
// include do código do parser da linha de comandos
#include "parser.c"
 
int main(int argc, char* argv[]) {
  char *linha;
  COMMAND *com;
 
  while (1) {
    if ((linha = readline("fuzzy_shell$ ")) == NULL)
      exit(0);
    if (strlen(linha) != 0) {
      add_history(linha);
      com = parse(linha);
      if (com) {
    print_parse(com);
    execute_commands(com);
    free_commlist(com);
      }
    }
    free(linha);
  }
}
 
 
void print_parse(COMMAND* commlist) {
  int n, i;
 
  printf("---------------------------------------------------------\n");
  printf("BG: %d IN: %s OUT: %s\n", background_exec, inputfile, outputfile);
  n = 1;
  while (commlist != NULL) {
    printf("#%d: cmd '%s' argc '%d' argv[] '", n, commlist->cmd, commlist->argc);
    i = 0;
    while (commlist->argv[i] != NULL) {
      printf("%s,", commlist->argv[i]);
      i++;
    }
    printf("%s'\n", commlist->argv[i]);
    commlist = commlist->next;
    n++;
  }
  printf("---------------------------------------------------------\n");
}
 
void free_commlist(COMMAND *commlist){
    // Esta função deverá libertar a memória alocada para a lista ligada.
    COMMAND* pointer;
    while(commlist != NULL){
      pointer = commlist;
      commlist = commlist->next;
      free(pointer);
    }
    free(commlist);
}
 
void execute_commands(COMMAND *commlist) {
    // Esta função deverá "executar" a "tubinholine" de comandos da lista commlist.
 
    pid_t pid;
    int tubinho[2], prev_tubinho, n=0, i;
 
    while(commlist != NULL){
 
        //make da tubinhos
        if(commlist->next != NULL){
            pipe(tubinho);
        }
 
        //fork da fork
        if( (pid=fork()) < 0 ){ }
        else if (pid == 0){
            //puto
            //inputfile
            if( inputfile != NULL){
                int fd = open(inputfile, O_RDONLY);
                if ( fd < 0){
                    perror("fuzzy_shell");
                    exit(1);
                }
                if (dup2(fd, STDIN_FILENO)<0){
                    perror("fuzzy_shell");
                    exit(1);
                }
                close(fd);
            }
 
            //outputfile
            if( outputfile != NULL){
                int fd = open(outputfile, O_CREAT | O_WRONLY, S_IRUSR | S_IWUSR);
                if ( fd < 0){
                    perror("fuzzy_shell");
                    exit(1);
                }
                if (dup2(fd, STDOUT_FILENO)<0){
                    perror("fuzzy_shell");
                    exit(1);
                }
                close(fd);
            }
 
            //tubinho da tubinho v2
            if(commlist->next != NULL){
                close(PIPE_READ);
                dup2(tubinho[PIPE_WRITE], 1);
                close(tubinho[PIPE_WRITE]);
            }
            if(n>0){
                dup2(prev_tubinho, 0);
                close(prev_tubinho);
            }
 
            //run da comm
            if(execvp(commlist->cmd, commlist->argv) < 0){
                perror("fuzzy_shell");
                exit(1);
            }
        }
        else{
            //pai
 
            //tubinho da tubinho v3
            if(n>0){
                close(prev_tubinho);
            }
 
            if(commlist->next != NULL){
                close(tubinho[PIPE_WRITE]);
                    prev_tubinho = tubinho[PIPE_READ];
            }
            //wait(NULL);
            commlist = commlist->next;
            n++;
        }
 
        for(i=0; i<n; i++){
            wait(NULL);
        }
    }
}
